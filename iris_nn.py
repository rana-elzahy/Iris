# -*- coding: utf-8 -*-
"""iris_nn

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1y2CjRZ15aGuAkMCfXsbSQscaQpEEAomT
"""

from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt

#load data
Iris = load_iris()
X = Iris.data
y = Iris.target

#Splitting data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=44, shuffle =True)

#Applying MLP  Model
MLPModel = MLPClassifier(activation='relu', solver='lbfgs', learning_rate='constant',  early_stopping= False,
                                   alpha=0.008 ,hidden_layer_sizes=(100, 3),random_state=33)
MLPModel.fit(X_train, y_train)

#Calculating scores
print('MLPClassifierModel Train Score is : ' , MLPModel.score(X_train, y_train))
print('MLPClassifierModel Test Score is : ' , MLPModel.score(X_test, y_test))

print('MLPClassifierModel No. of iterations is : ' , MLPModel.n_iter_)
print('MLPClassifierModel No. of layers is : ' , MLPModel.n_layers_)

#Applying Prediction
y_pred = MLPModel.predict(X_test)

#Calculating Confusion Matrix
CM = confusion_matrix(y_test, y_pred)
print('Confusion Matrix is : \n', CM)

# drawing confusion matrix
sns.heatmap(CM, center = True)
plt.show()